@model SMGJ.Models.ChangePasswordViewModel
@using SMGJ.Models
@{
    Layout = null;
}


@using (Html.BeginForm("PasswordReset_POST", "USER", FormMethod.Post, new { id = "forma" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ID)
    <div class="form-group">

        <label class="control-label">
            Fjalekalimi
        </label><span class="symbol required"></span>
        @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
    </div>
    <div class="form-group">
        <label class="control-label">
            Konfirmo fjalekalimin
        </label><span class="symbol required"></span>
        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
    </div>
    <div class="form-group">
        <button type="submit" title="Ruaj" class="btn btn-primary btn-sm">
            <i class="fa fa-check"></i>&nbsp; Ruaj
        </button>

    </div>

}
@Scripts.Render("~/bundles/jqueryval")
<script>
    $(function () {
        runValidator1();
    });
    runValidator1 = function () {
        var form1 = $('#forma');
        var errorHandler1 = $('.errorHandler', form1);
        var successHandler1 = $('.successHandler', form1);

        $.validator.addMethod(
"legalPassword",
function (value, element) {
    return /(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[-+_!#$%^&*.,?])/.test(value);
},
"Fjalekalimi duhet te permbaje se paku nje numer, nje shkronje te madhe, nje shkronje te vogel dhe nje nga  simbolet (-+_!#$%^&*.,?)  "
);
        $('#forma').validate({
            errorElement: "span", // contain the error msg in a span tag
            errorClass: 'help-block',
            errorPlacement: function (error, element) { // render error placement for each input type
                if (element.attr("type") == "radio" || element.attr("type") == "checkbox") { // for chosen elements, need to insert the error after the chosen container
                    error.insertAfter($(element).closest('.form-group').children('div').children().last());
                } else if (element.attr("name") == "dd" || element.attr("name") == "mm" || element.attr("name") == "yyyy") {
                    error.insertAfter($(element).closest('.form-group').children('div'));
                } else {
                    error.insertAfter(element);
                    // for other inputs, just perform default behavior
                }
            },
            ignore: "",
            rules: {
                NewPassword: {
                    required: true,
                    minlength: 6,
                    legalPassword: true,
                },
                ConfirmPassword: {
                    required: true,
                    equalTo: "#NewPassword"
                }
            },
            messages: {
                NewPassword: {
                    minlength: "Gjatesia e passwordit duhet te jete minumum 6 karaktere",
                    //   regex: "Fjalekalimi duhet te permbaje nje karakter, nje shkronje te madhe, nje shkronje te vogel dhe gjatesia te jete minimum 6",
                }
            },
            invalidHandler: function (event, validator) { //display error alert on form submit
                successHandler1.hide();
                errorHandler1.show();
            },
            highlight: function (element) {
                $(element).closest('.help-block').removeClass('valid');
                // display OK icon
                $(element).closest('.form-group').removeClass('has-success').addClass('has-error').find('.symbol').removeClass('ok').addClass('required');
                // add the Bootstrap error class to the control group
            },
            unhighlight: function (element) { // revert the change done by hightlight
                $(element).closest('.form-group').removeClass('has-error');
                // set error class to the control group
            },
            success: function (label, element) {
                label.addClass('help-block valid');
                // mark the current input as valid and display OK icon
                $(element).closest('.form-group').removeClass('has-error').addClass('has-success').find('.symbol').removeClass('required').addClass('ok');
            },
            submitHandler: function (form1) {
                successHandler1.show();
                errorHandler1.hide();
                // submit form
                if ($(form1).valid())
                    form1.submit();
                return false; // pre
            }
        });
    }
</script>